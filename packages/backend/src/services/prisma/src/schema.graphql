### This file was autogenerated by GraphQL Nexus
### Do not make changes to this file directly


type AuthPayload {
  token: String!
  user: User!
}

input BooleanFilter {
  equals: Boolean
  not: Boolean
}

type Chat {
  createdAt: DateTime!
  id: ID!
  isArchived: Boolean!
  members(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
  messages(after: String, before: String, first: Int, last: Int, skip: Int): [ChatMessage!]
  name: String!
  owner: User!
  picture: String!
  updatedAt: DateTime!
}

input ChatCreateInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserCreateManyWithoutMembersInput
  messages: ChatMessageCreateManyWithoutMessagesInput
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  picture: String!
  updatedAt: DateTime
}

input ChatCreateManyWithoutChatsInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutMembersInput!]
}

input ChatCreateManyWithoutChatsOwnedInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutOwnerInput!]
}

input ChatCreateOneWithoutChatInput {
  connect: ChatWhereUniqueInput
  create: ChatCreateWithoutMessagesInput
}

input ChatCreateWithoutMembersInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  messages: ChatMessageCreateManyWithoutMessagesInput
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  picture: String!
  updatedAt: DateTime
}

input ChatCreateWithoutMessagesInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserCreateManyWithoutMembersInput
  name: String!
  owner: UserCreateOneWithoutOwnerInput!
  picture: String!
  updatedAt: DateTime
}

input ChatCreateWithoutOwnerInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserCreateManyWithoutMembersInput
  messages: ChatMessageCreateManyWithoutMessagesInput
  name: String!
  picture: String!
  updatedAt: DateTime
}

type ChatMessage {
  chat: Chat!
  content: String!
  createdAt: DateTime!
  id: ID!
  sender: User
}

input ChatMessageCreateInput {
  chat: ChatCreateOneWithoutChatInput!
  content: String!
  createdAt: DateTime
  id: ID
  sender: UserCreateOneWithoutSenderInput
  type: MessageType!
}

input ChatMessageCreateManyWithoutMessagesInput {
  connect: [ChatMessageWhereUniqueInput!]
  create: [ChatMessageCreateWithoutChatInput!]
}

input ChatMessageCreateOneWithoutChatMessageInput {
  connect: ChatMessageWhereUniqueInput
  create: ChatMessageCreateWithoutSenderInput
}

input ChatMessageCreateWithoutChatInput {
  content: String!
  createdAt: DateTime
  id: ID
  sender: UserCreateOneWithoutSenderInput
  type: MessageType!
}

input ChatMessageCreateWithoutSenderInput {
  chat: ChatCreateOneWithoutChatInput!
  content: String!
  createdAt: DateTime
  id: ID
  type: MessageType!
}

input ChatMessageUpdateInput {
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  content: String
  createdAt: DateTime
  id: ID
  sender: UserUpdateOneWithoutChatMessageInput
  type: MessageType
}

input ChatMessageUpdateManyDataInput {
  content: String
  createdAt: DateTime
  id: ID
  type: MessageType
}

input ChatMessageUpdateManyWithoutChatInput {
  connect: [ChatMessageWhereUniqueInput!]
  create: [ChatMessageCreateWithoutChatInput!]
  delete: [ChatMessageWhereUniqueInput!]
  deleteMany: [MutationUpdateOneChatWhereInput!]
  disconnect: [ChatMessageWhereUniqueInput!]
  set: [ChatMessageWhereUniqueInput!]
  update: [ChatMessageUpdateWithWhereUniqueWithoutChatInput!]
  updateMany: [ChatMessageUpdateManyWithWhereNestedInput!]
  upsert: [ChatMessageUpsertWithWhereUniqueWithoutChatInput!]
}

input ChatMessageUpdateManyWithWhereNestedInput {
  data: ChatMessageUpdateManyDataInput!
  where: MutationUpdateOneChatWhereInput!
}

input ChatMessageUpdateOneWithoutSenderInput {
  connect: ChatMessageWhereUniqueInput
  create: ChatMessageCreateWithoutSenderInput
  delete: Boolean
  disconnect: Boolean
  update: ChatMessageUpdateWithoutSenderDataInput
  upsert: ChatMessageUpsertWithoutSenderInput
}

input ChatMessageUpdateWithoutChatDataInput {
  content: String
  createdAt: DateTime
  id: ID
  sender: UserUpdateOneWithoutChatMessageInput
  type: MessageType
}

input ChatMessageUpdateWithoutSenderDataInput {
  chat: ChatUpdateOneRequiredWithoutMessagesInput
  content: String
  createdAt: DateTime
  id: ID
  type: MessageType
}

input ChatMessageUpdateWithWhereUniqueWithoutChatInput {
  data: ChatMessageUpdateWithoutChatDataInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageUpsertWithoutSenderInput {
  create: ChatMessageCreateWithoutSenderInput!
  update: ChatMessageUpdateWithoutSenderDataInput!
}

input ChatMessageUpsertWithWhereUniqueWithoutChatInput {
  create: ChatMessageCreateWithoutChatInput!
  update: ChatMessageUpdateWithoutChatDataInput!
  where: ChatMessageWhereUniqueInput!
}

input ChatMessageWhereUniqueInput {
  id: ID
}

input ChatUpdateInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserUpdateManyWithoutChatsInput
  messages: ChatMessageUpdateManyWithoutChatInput
  name: String
  owner: UserUpdateOneRequiredWithoutChatsOwnedInput
  picture: String
  updatedAt: DateTime
}

input ChatUpdateManyDataInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  name: String
  picture: String
  updatedAt: DateTime
}

input ChatUpdateManyWithoutMembersInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutMembersInput!]
  delete: [ChatWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutMembersInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutMembersInput!]
}

input ChatUpdateManyWithoutOwnerInput {
  connect: [ChatWhereUniqueInput!]
  create: [ChatCreateWithoutOwnerInput!]
  delete: [ChatWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [ChatWhereUniqueInput!]
  set: [ChatWhereUniqueInput!]
  update: [ChatUpdateWithWhereUniqueWithoutOwnerInput!]
  updateMany: [ChatUpdateManyWithWhereNestedInput!]
  upsert: [ChatUpsertWithWhereUniqueWithoutOwnerInput!]
}

input ChatUpdateManyWithWhereNestedInput {
  data: ChatUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input ChatUpdateOneRequiredWithoutMessagesInput {
  connect: ChatWhereUniqueInput
  create: ChatCreateWithoutMessagesInput
  update: ChatUpdateWithoutMessagesDataInput
  upsert: ChatUpsertWithoutMessagesInput
}

input ChatUpdateWithoutMembersDataInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  messages: ChatMessageUpdateManyWithoutChatInput
  name: String
  owner: UserUpdateOneRequiredWithoutChatsOwnedInput
  picture: String
  updatedAt: DateTime
}

input ChatUpdateWithoutMessagesDataInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserUpdateManyWithoutChatsInput
  name: String
  owner: UserUpdateOneRequiredWithoutChatsOwnedInput
  picture: String
  updatedAt: DateTime
}

input ChatUpdateWithoutOwnerDataInput {
  createdAt: DateTime
  id: ID
  isArchived: Boolean
  members: UserUpdateManyWithoutChatsInput
  messages: ChatMessageUpdateManyWithoutChatInput
  name: String
  picture: String
  updatedAt: DateTime
}

input ChatUpdateWithWhereUniqueWithoutMembersInput {
  data: ChatUpdateWithoutMembersDataInput!
  where: ChatWhereUniqueInput!
}

input ChatUpdateWithWhereUniqueWithoutOwnerInput {
  data: ChatUpdateWithoutOwnerDataInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithoutMessagesInput {
  create: ChatCreateWithoutMessagesInput!
  update: ChatUpdateWithoutMessagesDataInput!
}

input ChatUpsertWithWhereUniqueWithoutMembersInput {
  create: ChatCreateWithoutMembersInput!
  update: ChatUpdateWithoutMembersDataInput!
  where: ChatWhereUniqueInput!
}

input ChatUpsertWithWhereUniqueWithoutOwnerInput {
  create: ChatCreateWithoutOwnerInput!
  update: ChatUpdateWithoutOwnerDataInput!
  where: ChatWhereUniqueInput!
}

input ChatWhereUniqueInput {
  id: ID
}

"""DateTime"""
scalar DateTime

enum MessageType {
  LOCATION
  PICTURE
  TEXT
}

type Mutation {
  createOneChat(data: ChatCreateInput!): Chat!
  createOneChatMessage(data: ChatMessageCreateInput!): ChatMessage!
  createOnePost(data: PostCreateInput!): Post!
  createOneUser(data: UserCreateInput!): User!
  deleteOneChat(where: ChatWhereUniqueInput!): Chat
  deleteOneChatMessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  deleteOnePost(where: PostWhereUniqueInput!): Post
  deleteOneUser(where: UserWhereUniqueInput!): User
  login(email: String, password: String): AuthPayload!
  signup(email: String, name: String, password: String, username: String): AuthPayload!
  updateOneChat(data: ChatUpdateInput!, where: ChatWhereUniqueInput!): Chat
  updateOneChatMessage(data: ChatMessageUpdateInput!, where: ChatMessageWhereUniqueInput!): ChatMessage
  updateOnePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateOneUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
}

input MutationUpdateOneChatFilter {
  every: MutationUpdateOneChatWhereInput
  none: MutationUpdateOneChatWhereInput
  some: MutationUpdateOneChatWhereInput
}

input MutationUpdateOneChatWhereInput {
  AND: [MutationUpdateOneChatWhereInput!]
  chats: MutationUpdateOneChatFilter
  chatsOwned: MutationUpdateOneChatFilter
  createdAt: MutationUpdateOneChatFilter
  email: StringFilter
  id: StringFilter
  name: StringFilter
  NOT: [MutationUpdateOneChatWhereInput!]
  OR: [MutationUpdateOneChatWhereInput!]
  password: StringFilter
  picture: StringFilter
  posts: MutationUpdateOneChatFilter
  updatedAt: MutationUpdateOneChatFilter
  username: StringFilter
}

input MutationUpdateOneUserFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: DateTime
  notIn: [DateTime!]
}

input MutationUpdateOneUserWhereInput {
  AND: [MutationUpdateOneUserWhereInput!]
  createdAt: MutationUpdateOneUserFilter
  id: StringFilter
  isArchived: BooleanFilter
  members: MutationUpdateOneUserFilter
  messages: MutationUpdateOneUserFilter
  name: StringFilter
  NOT: [MutationUpdateOneUserWhereInput!]
  OR: [MutationUpdateOneUserWhereInput!]
  picture: StringFilter
  updatedAt: MutationUpdateOneUserFilter
}

type Post {
  author: User
  content: String!
  createdAt: DateTime!
  id: ID!
  published: Boolean!
  title: String!
  updatedAt: DateTime!
}

input PostCreateInput {
  author: UserCreateOneWithoutAuthorInput
  content: String!
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostCreateManyWithoutPostsInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
}

input PostCreateWithoutAuthorInput {
  content: String!
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String!
  updatedAt: DateTime
}

input PostUpdateInput {
  author: UserUpdateOneWithoutPostsInput
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyDataInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateManyWithoutAuthorInput {
  connect: [PostWhereUniqueInput!]
  create: [PostCreateWithoutAuthorInput!]
  delete: [PostWhereUniqueInput!]
  deleteMany: [MutationUpdateOneUserWhereInput!]
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  update: [PostUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PostUpdateManyWithWhereNestedInput!]
  upsert: [PostUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PostUpdateManyWithWhereNestedInput {
  data: PostUpdateManyDataInput!
  where: MutationUpdateOneUserWhereInput!
}

input PostUpdateWithoutAuthorDataInput {
  content: String
  createdAt: DateTime
  id: ID
  published: Boolean
  title: String
  updatedAt: DateTime
}

input PostUpdateWithWhereUniqueWithoutAuthorInput {
  data: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostUpsertWithWhereUniqueWithoutAuthorInput {
  create: PostCreateWithoutAuthorInput!
  update: PostUpdateWithoutAuthorDataInput!
  where: PostWhereUniqueInput!
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  chat(where: ChatWhereUniqueInput!): Chat
  chatmessage(where: ChatMessageWhereUniqueInput!): ChatMessage
  chatmessages(after: String, before: String, first: Int, last: Int, skip: Int): [ChatMessage!]
  me: User
  post(where: PostWhereUniqueInput!): Post
  posts: [Post!]!
  user(where: UserWhereUniqueInput!): User
  users(after: String, before: String, first: Int, last: Int, skip: Int): [User!]
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: String
  notIn: [String!]
  startsWith: String
}

type User {
  chats: [Chat!]!
  chatsOwned(after: String, before: String, first: Int, last: Int, skip: Int): [Chat!]
  createdAt: DateTime!
  email: String!
  id: ID!
  name: String!
  picture: String!
  posts(after: String, before: String, first: Int, last: Int, skip: Int): [Post!]
  updatedAt: DateTime!
  username: String!
}

input UserCreateInput {
  chatMessage: ChatMessageCreateOneWithoutChatMessageInput
  chats: ChatCreateManyWithoutChatsInput
  chatsOwned: ChatCreateManyWithoutChatsOwnedInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  password: String!
  picture: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateManyWithoutMembersInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutChatsInput!]
}

input UserCreateOneWithoutAuthorInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
}

input UserCreateOneWithoutOwnerInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChatsOwnedInput
}

input UserCreateOneWithoutSenderInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChatMessageInput
}

input UserCreateWithoutChatMessageInput {
  chats: ChatCreateManyWithoutChatsInput
  chatsOwned: ChatCreateManyWithoutChatsOwnedInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  password: String!
  picture: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutChatsInput {
  chatMessage: ChatMessageCreateOneWithoutChatMessageInput
  chatsOwned: ChatCreateManyWithoutChatsOwnedInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  password: String!
  picture: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutChatsOwnedInput {
  chatMessage: ChatMessageCreateOneWithoutChatMessageInput
  chats: ChatCreateManyWithoutChatsInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  password: String!
  picture: String!
  posts: PostCreateManyWithoutPostsInput
  updatedAt: DateTime
  username: String!
}

input UserCreateWithoutPostsInput {
  chatMessage: ChatMessageCreateOneWithoutChatMessageInput
  chats: ChatCreateManyWithoutChatsInput
  chatsOwned: ChatCreateManyWithoutChatsOwnedInput
  createdAt: DateTime
  email: String!
  id: ID
  name: String!
  password: String!
  picture: String!
  updatedAt: DateTime
  username: String!
}

input UserUpdateInput {
  chatMessage: ChatMessageUpdateOneWithoutSenderInput
  chats: ChatUpdateManyWithoutMembersInput
  chatsOwned: ChatUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String
}

input UserUpdateManyDataInput {
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  updatedAt: DateTime
  username: String
}

input UserUpdateManyWithoutChatsInput {
  connect: [UserWhereUniqueInput!]
  create: [UserCreateWithoutChatsInput!]
  delete: [UserWhereUniqueInput!]
  deleteMany: [MutationUpdateOneChatWhereInput!]
  disconnect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutChatsInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutChatsInput!]
}

input UserUpdateManyWithWhereNestedInput {
  data: UserUpdateManyDataInput!
  where: MutationUpdateOneChatWhereInput!
}

input UserUpdateOneRequiredWithoutChatsOwnedInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChatsOwnedInput
  update: UserUpdateWithoutChatsOwnedDataInput
  upsert: UserUpsertWithoutChatsOwnedInput
}

input UserUpdateOneWithoutChatMessageInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutChatMessageInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutChatMessageDataInput
  upsert: UserUpsertWithoutChatMessageInput
}

input UserUpdateOneWithoutPostsInput {
  connect: UserWhereUniqueInput
  create: UserCreateWithoutPostsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPostsDataInput
  upsert: UserUpsertWithoutPostsInput
}

input UserUpdateWithoutChatMessageDataInput {
  chats: ChatUpdateManyWithoutMembersInput
  chatsOwned: ChatUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutChatsDataInput {
  chatMessage: ChatMessageUpdateOneWithoutSenderInput
  chatsOwned: ChatUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutChatsOwnedDataInput {
  chatMessage: ChatMessageUpdateOneWithoutSenderInput
  chats: ChatUpdateManyWithoutMembersInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  posts: PostUpdateManyWithoutAuthorInput
  updatedAt: DateTime
  username: String
}

input UserUpdateWithoutPostsDataInput {
  chatMessage: ChatMessageUpdateOneWithoutSenderInput
  chats: ChatUpdateManyWithoutMembersInput
  chatsOwned: ChatUpdateManyWithoutOwnerInput
  createdAt: DateTime
  email: String
  id: ID
  name: String
  password: String
  picture: String
  updatedAt: DateTime
  username: String
}

input UserUpdateWithWhereUniqueWithoutChatsInput {
  data: UserUpdateWithoutChatsDataInput!
  where: UserWhereUniqueInput!
}

input UserUpsertWithoutChatMessageInput {
  create: UserCreateWithoutChatMessageInput!
  update: UserUpdateWithoutChatMessageDataInput!
}

input UserUpsertWithoutChatsOwnedInput {
  create: UserCreateWithoutChatsOwnedInput!
  update: UserUpdateWithoutChatsOwnedDataInput!
}

input UserUpsertWithoutPostsInput {
  create: UserCreateWithoutPostsInput!
  update: UserUpdateWithoutPostsDataInput!
}

input UserUpsertWithWhereUniqueWithoutChatsInput {
  create: UserCreateWithoutChatsInput!
  update: UserUpdateWithoutChatsDataInput!
  where: UserWhereUniqueInput!
}

input UserWhereUniqueInput {
  email: String
  id: ID
  username: String
}
